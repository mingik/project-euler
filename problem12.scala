/**

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

  */

lazy val naturalNumbers: Stream[Int] = 1 #:: naturalNumbers.map(_+1)
lazy val triangleNumbers: Stream[Int] = 1 #:: triangleNumbers.zip(naturalNumbers.tail).map(p => p._1 + p._2)
def numberOfDivisors(n: Int): Int = (1 to n).takeWhile(i => i*i <= n).foldLeft(0)( (acc,div) => if (n % div == 0) acc+2 else acc) 

trianlgeNumbers.find( numberOfDivisors( _ ) > 500 )

// res8: Option[Int] = Some(76576500)
